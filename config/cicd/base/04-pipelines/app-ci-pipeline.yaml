apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  creationTimestamp: null
  name: app-ci-pipeline
  namespace: cicd
spec:
  finally:
  - name: set-final-status
    params:
    - name: REPO
      value: $(params.REPO)
    - name: GIT_REPO
      value: $(params.GIT_REPO)
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    - name: DESCRIPTION
      value: The build is complete
    - name: STATE
      value: $(tasks.build-image.status)
    taskRef:
      kind: Task
      name: set-commit-status
  params:
  - name: REPO
    type: string
  - name: COMMIT_SHA
    type: string
  - name: TLSVERIFY
    type: string
  - name: BUILD_EXTRA_ARGS
    type: string
  - name: IMAGE
    type: string
  - name: MANIFEST_FILE
    type: string
  - name: MANIFEST_FILE_PROD
    type: string
  - name: MANIFEST_REPO
    type: string
  - name: GIT_REF
    type: string
  - name: COMMIT_DATE
    type: string
  - name: COMMIT_AUTHOR
    type: string
  - name: COMMIT_MESSAGE
    type: string
  - name: GIT_REPO
    type: string
  tasks:
  - name: set-pending-status
    params:
    - name: REPO
      value: $(params.REPO)
    - name: GIT_REPO
      value: $(params.GIT_REPO)
    - name: COMMIT_SHA
      value: $(params.COMMIT_SHA)
    - name: DESCRIPTION
      value: The build has started
    - name: STATE
      value: pending
    taskRef:
      kind: Task
      name: set-commit-status
  - name: clone-source
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REF)
    runAfter:
    - set-pending-status
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
  - name: build-image
    params:
    - name: TLSVERIFY
      value: $(params.TLSVERIFY)
    - name: BUILD_EXTRA_ARGS
      value: --label=io.openshift.build.commit.author='$(params.COMMIT_AUTHOR)' --label=io.openshift.build.commit.date='$(params.COMMIT_DATE)'
        --label=io.openshift.build.commit.id='$(params.COMMIT_SHA)' --label=io.openshift.build.commit.message='$(params.COMMIT_MESSAGE)'
        --label=io.openshift.build.commit.ref='$(params.GIT_REF)'
    - name: IMAGE
      value: $(params.IMAGE)
    runAfter:
    - clone-source
    taskRef:
      kind: ClusterTask
      name: buildah
    workspaces:
    - name: source
      workspace: shared-data

  - name: image-scan
    taskRef:
      name: stackrox-image-check
      kind: Task
    params:
      - name: image
        value:  $(params.IMAGE)
      - name: rox_api_token
        value: roxsecrets
      - name: rox_central_endpoint
        value: roxsecrets
      - name: insecure-skip-tls-verify
        value: "true"
    runAfter:
    - build-image

  - name: update-dev-manifest
    params:
    - name: image
      value: $(params.IMAGE)
    - name: deployment_file
      value: $(params.MANIFEST_FILE)
    - name: deployment_repo
      value: $(params.MANIFEST_REPO)
    - name: git_user_name
      value: $(params.COMMIT_AUTHOR)
    runAfter:
    - image-scan
    taskRef:
      kind: Task
      name: update-manifest
    workspaces:
    - name: source
      workspace: shared-data

  - name: pr-prod-manifest
    params:
    - name: image
      value: $(params.IMAGE)
    - name: deployment_file
      value: $(params.MANIFEST_FILE_PROD)
    - name: deployment_repo
      value: $(params.MANIFEST_REPO)
    - name: git_user_name
      value: $(params.COMMIT_AUTHOR)
    - name: target-branch
      value: feature-for-$(params.COMMIT_SHA)
    runAfter:
    - update-dev-manifest
    taskRef:
      kind: Task
      name: pr-manifest
    workspaces:
    - name: source
      workspace: shared-data

  - name: issue-prod-pr
    params:
    - name: image
      value: $(params.IMAGE)
    - name: REPO_FULL_NAME
      value: globex/gitops
    - name: GITHUB_TOKEN_SECRET_NAME
      value: git-host-access-token
    - name: GITHUB_TOKEN_SECRET_KEY
      value: token
    - name: HEAD
      value: feature-for-$(params.COMMIT_SHA)
    - name: BASE
      value: main
    - name: BODY
      value: "Update prod image for $(params.COMMIT_MESSAGE)"
    - name: TITLE
      value: "Production update: $(params.COMMIT_MESSAGE)"
    runAfter:
    - pr-prod-manifest
    taskRef:
      kind: Task
      name: github-open-pr
    workspaces:
    - name: source
      workspace: shared-data

  workspaces:
  - description: This workspace will receive the cloned git repo.
    name: shared-data
